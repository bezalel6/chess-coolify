version: '3.8'

services:
  # Next.js Application (using pre-built files from host)
  app:
    image: node:20-alpine
    working_dir: /app
    volumes:
      # Mount pre-built files from host system
      # Option 1: If Coolify has access to /home/rndev
      - /home/rndev/chess-app-builds/app-dist:/app:ro
      # Option 2: Use Coolify volumes (configure in Coolify UI)
      # - app-dist:/app:ro
    command: node server.js
    ports:
      - "${APP_PORT:-3000}:3000"
    environment:
      - NODE_ENV=production
      - HOSTNAME=0.0.0.0
      - PORT=3000
      - NEXT_PUBLIC_WEBSOCKET_URL=${NEXT_PUBLIC_WEBSOCKET_URL:-wss://ws-chess.rndev.site}
      - NEXTAUTH_URL=${NEXTAUTH_URL}
      - NEXTAUTH_SECRET=${NEXTAUTH_SECRET}
      - DATABASE_URL=${DATABASE_URL}
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
    restart: unless-stopped
    depends_on:
      - websocket
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      # Traefik labels for main app
      - "traefik.enable=true"
      - "traefik.http.routers.app.rule=Host(`chess.rndev.site`)"
      - "traefik.http.routers.app.entrypoints=https,http"
      - "traefik.http.routers.app.tls=true"
      - "traefik.http.routers.app.tls.certresolver=letsencrypt"
      - "traefik.http.services.app.loadbalancer.server.port=3000"
      # HTTP to HTTPS redirect
      - "traefik.http.routers.app-http.rule=Host(`chess.rndev.site`)"
      - "traefik.http.routers.app-http.entrypoints=http"
      - "traefik.http.routers.app-http.middlewares=redirect-to-https"

  # WebSocket Server (using pre-built JavaScript)
  websocket:
    image: node:20-alpine
    working_dir: /app
    volumes:
      # Mount pre-built WebSocket server
      - /home/rndev/chess-app-builds/ws-dist:/app:ro
    # Just run the compiled JavaScript directly
    command: node ws-server.js
    ports:
      - "${WS_PORT:-3001}:3001"
      - "${HEALTH_PORT:-3002}:3002"
    environment:
      - NODE_ENV=production
      - WS_PORT=3001
      - HEALTH_PORT=3002
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis}@redis:6379
      - ALLOWED_ORIGINS=${ALLOWED_ORIGINS:-https://chess.rndev.site,http://localhost:8080,http://localhost:3000,http://rndev.local:3000}
      - NEXTAUTH_URL=${NEXTAUTH_URL}
      - NEXTAUTH_SECRET=${NEXTAUTH_SECRET}
      - NEXT_PUBLIC_WEBSOCKET_URL=${NEXT_PUBLIC_WEBSOCKET_URL:-wss://ws-chess.rndev.site}
    restart: unless-stopped
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:3002/health"]
      interval: 10s
      timeout: 5s
      retries: 5
    labels:
      # Traefik labels for WebSocket service
      - "traefik.enable=true"
      - "traefik.http.routers.websocket.rule=Host(`ws-chess.rndev.site`)"
      - "traefik.http.routers.websocket.entrypoints=https,http"
      - "traefik.http.routers.websocket.tls=true"
      - "traefik.http.routers.websocket.tls.certresolver=letsencrypt"
      - "traefik.http.services.websocket.loadbalancer.server.port=3001"
      # HTTP to HTTPS redirect
      - "traefik.http.routers.websocket-http.rule=Host(`ws-chess.rndev.site`)"
      - "traefik.http.routers.websocket-http.entrypoints=http"
      - "traefik.http.routers.websocket-http.middlewares=redirect-to-https"
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"

  # Redis with authentication
  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis}
    volumes:
      - redis-data:/data
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD:-redis}", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD:-redis}

networks:
  app-network:
    driver: bridge

volumes:
  redis-data:
    driver: local